From 0375766fb1129e9ca63c7901275633fe48baea54 Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Sat, 15 Aug 2015 01:25:53 +0200
Subject: [PATCH] Non Blocking Auto Save


diff --git a/src/main/java/de/minetick/AutoSaveJob.java b/src/main/java/de/minetick/AutoSaveJob.java
new file mode 100644
index 0000000..4382bbc
--- /dev/null
+++ b/src/main/java/de/minetick/AutoSaveJob.java
@@ -0,0 +1,63 @@
+package de.minetick;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.SpigotTimings;
+import org.bukkit.event.world.WorldSaveEvent;
+
+import net.minecraft.server.ExceptionWorldConflict;
+import net.minecraft.server.FileIOThread;
+import net.minecraft.server.IProgressUpdate;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.RegionFileCache;
+import net.minecraft.server.WorldServer;
+
+public class AutoSaveJob {
+
+    public enum JobDetail {
+        WORLD_SAVE,
+        WORLD_SAVEEVENT,
+    }
+
+    private WorldServer worldserver;
+    private JobDetail jobDetail;
+
+    public AutoSaveJob(JobDetail detail, WorldServer worldserver) {
+        this.jobDetail = detail;
+        this.worldserver = worldserver;
+    }
+
+    /**
+     * 
+     * @return true if the job shall be removed from the autosave queue
+     * @throws ExceptionWorldConflict
+     */
+
+    public boolean process() throws ExceptionWorldConflict {
+        if(this.isJob(JobDetail.WORLD_SAVE) && this.worldserver != null) {
+            SpigotTimings.worldSaveTimer.startTiming();
+            MinecraftServer.getServer().info("[AutoSave] Saving world " + this.worldserver.getWorld().getName());
+            this.worldserver.save(true, (IProgressUpdate) null);
+            FileIOThread.a().setNoDelay(true);
+            SpigotTimings.worldSaveTimer.stopTiming();
+        } else if(this.isJob(JobDetail.WORLD_SAVEEVENT) && this.worldserver != null) {
+            if(FileIOThread.a().isDone()) {
+                SpigotTimings.worldSaveTimer.startTiming();
+                FileIOThread.a().setNoDelay(false);
+                RegionFileCache.a();
+                Bukkit.getPluginManager().callEvent(new WorldSaveEvent(this.worldserver.getWorld()));
+                SpigotTimings.worldSaveTimer.stopTiming();
+            } else {
+                return false;
+            }
+        }
+        this.worldserver = null;
+        return true;
+    }
+
+    private boolean isJob(JobDetail detail) {
+        if(this.jobDetail != null) {
+            return this.jobDetail.equals(detail);
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/FileIOThread.java b/src/main/java/net/minecraft/server/FileIOThread.java
index c9b3bf4..4476f3b 100644
--- a/src/main/java/net/minecraft/server/FileIOThread.java
+++ b/src/main/java/net/minecraft/server/FileIOThread.java
@@ -12,6 +12,16 @@ public class FileIOThread implements Runnable {
     private volatile long d;
     private volatile boolean e;
 
+    // Migot start
+    public boolean isDone() {
+        return this.c == this.d;
+    }
+
+    public void setNoDelay(boolean active) {
+        this.e = active;
+    }
+    // Migot end
+
     private FileIOThread() {
         Thread thread = new Thread(this, "File IO Thread");
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4c40106..268ac1c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -10,6 +10,7 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -48,6 +49,12 @@ import org.bukkit.craftbukkit.Main;
 import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 // CraftBukkit end
 
+// Migot start
+import de.minetick.AutoSaveJob;
+import de.minetick.AutoSaveJob.JobDetail;
+import java.util.LinkedList;
+// Migot end
+
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
 
     public static final Logger LOGGER = LogManager.getLogger();
@@ -122,6 +129,42 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private static final int SAMPLE_INTERVAL = 100;
     public final double[] recentTps = new double[ 3 ];
     // Spigot end
+    // Migot start
+    private LinkedList<AutoSaveJob> autoSaveWorlds = new LinkedList<AutoSaveJob>();
+    private int autoSaveDelay = 0;
+    private boolean autoSaveOrdered = false;
+
+    private void queueWorldsForAutoSave() {
+        if (!this.N) {
+            this.autoSaveWorlds.clear();
+            for (int j = 0; j < this.worlds.size(); ++j) {
+                WorldServer worldserver = this.worlds.get(j);
+                if(worldserver != null) {
+                    this.autoSaveWorlds.add(new AutoSaveJob(JobDetail.WORLD_SAVE, worldserver));
+                    this.autoSaveWorlds.add(new AutoSaveJob(JobDetail.WORLD_SAVEEVENT, worldserver));
+                }
+            }
+            int queuesize = this.autoSaveWorlds.size() / 2;
+            this.autoSaveDelay = 0;
+            this.autoSaveOrdered = true;
+            this.info("[AutoSave] " + queuesize + " worlds - Starting ...");
+        }
+    }
+
+    private void autoSaveNextWorld() throws ExceptionWorldConflict {
+        if(!this.autoSaveWorlds.isEmpty()) {
+            if(this.autoSaveDelay++ > 20) { // delay of 1 seconds between checks of the auto-save job queue
+                this.autoSaveDelay = 0;
+                if(this.autoSaveWorlds.getFirst().process()) {
+                    this.autoSaveWorlds.removeFirst();
+                }
+            }
+        } else if(this.autoSaveOrdered){
+            this.info("[AutoSave] Done.");
+            this.autoSaveOrdered = false;
+        }
+    }
+    // Migot end
 
     public MinecraftServer(OptionSet options, Proxy proxy, File file1) {
         io.netty.util.ResourceLeakDetector.setEnabled( false ); // Spigot - disable
@@ -667,13 +710,19 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 
         if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
-            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
+            //SpigotTimings.worldSaveTimer.startTiming(); // Spigot // Migot - moved to de.minetick.AutoSaveJob
             this.methodProfiler.a("save");
             this.v.savePlayers();
-            this.saveChunks(true);
+            this.queueWorldsForAutoSave(); // Migot
             this.methodProfiler.b();
-            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
+            //SpigotTimings.worldSaveTimer.stopTiming(); // Spigot // Migot - moved to de.minetick.AutoSaveJob
+        }
+
+        // Migot start
+        if(this.autoSaveOrdered) {
+            this.autoSaveNextWorld();
         }
+        // Migot end
 
         this.methodProfiler.a("tallying");
         this.h[this.ticks % 100] = System.nanoTime() - i;
-- 
1.8.3.msysgit.0

