From e1f50d76641324b37748c69fa6296d80c3a5961c Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Sun, 16 Aug 2015 11:00:00 +0200
Subject: [PATCH] Dont Spam Hopper InventoryMoveItemEvents


diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index cab636a..33ef09a 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -43,6 +43,41 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     }
     // CraftBukkit end
 
+    // Migot start
+    private static int doesInventoryHaveEnoughSpaceForItem(IInventory iinventory, ItemStack itemstack, EnumDirection enumdirection) {
+        if (iinventory instanceof IWorldInventory && enumdirection != null) {
+            IWorldInventory iworldinventory = (IWorldInventory) iinventory;
+            int[] possibleSlots = iworldinventory.getSlotsForFace(enumdirection);
+            for(int i = 0; i < possibleSlots.length; i++) {
+                int slotId = possibleSlots[i];
+                if(a(iinventory, itemstack, slotId, enumdirection)) {
+                    ItemStack slot = iinventory.getItem(slotId);
+                    if(slot == null || a(slot, itemstack)) {
+                        return slotId;
+                    }
+                }
+            }
+        } else {
+            int size = iinventory.getSize();
+            for(int i = 0; i < size; i++) {
+                if(a(iinventory, itemstack, i, enumdirection)) {
+                    ItemStack slot = iinventory.getItem(i);
+                    if(slot == null || a(slot, itemstack)) {
+                        return i;
+                    }
+                }
+            }
+        }
+        return -1;
+    }
+
+    private static int checkForPossibleInventorySlot(IInventory iinventory, ItemStack itemstack, EnumDirection enumdirection) {
+        ItemStack copyOfItemBeingProcessed = itemstack.cloneItemStack();
+        copyOfItemBeingProcessed.count = 1;
+        return doesInventoryHaveEnoughSpaceForItem(iinventory, copyOfItemBeingProcessed, enumdirection);
+    }
+    // Migot end
+
     public TileEntityHopper() {}
 
     public void a(NBTTagCompound nbttagcompound) {
@@ -251,6 +286,13 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                         ItemStack itemstack = this.getItem(i).cloneItemStack();
                         // ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
 
+                        // Migot start
+                        int possibleInventorySlot = checkForPossibleInventorySlot(iinventory, itemstack, enumdirection);
+                        if(possibleInventorySlot < 0) {
+                            continue;
+                        }
+                        // Migot end
+
                         // CraftBukkit start - Call event when pushing items into other inventories
                         CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
 
@@ -270,7 +312,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                             return false;
                         }
                         int origCount = event.getItem().getAmount(); // Spigot
-                        ItemStack itemstack1 = addItem(iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
+                        ItemStack itemstack1 = addItem(iinventory, possibleInventorySlot, CraftItemStack.asNMSCopy(event.getItem()), enumdirection); // Migot
 
                         if (itemstack1 == null || itemstack1.count == 0) {
                             if (event.getItem().equals(oitemstack)) {
@@ -390,6 +432,14 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         if (itemstack != null && b(iinventory, itemstack, i, enumdirection)) {
             ItemStack itemstack1 = itemstack.cloneItemStack();
             // ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
+
+            // Migot start
+            int possibleInventorySlot = checkForPossibleInventorySlot(ihopper, iinventory.getItem(i), null);
+            if(possibleInventorySlot < 0) {
+                return false;
+            }
+            // Migot end
+
             // CraftBukkit start - Call event on collection of items from inventories into the hopper
             CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfig.hopperAmount)); // Spigot
 
@@ -415,7 +465,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                 return false;
             }
             int origCount = event.getItem().getAmount(); // Spigot
-            ItemStack itemstack2 = addItem(ihopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+            ItemStack itemstack2 = addItem(ihopper, possibleInventorySlot, CraftItemStack.asNMSCopy(event.getItem()), null); // Migot
 
             if (itemstack2 == null || itemstack2.count == 0) {
                 if (event.getItem().equals(oitemstack)) {
@@ -440,6 +490,13 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         if (entityitem == null) {
             return false;
         } else {
+            // Migot start
+            int possibleInventorySlot = checkForPossibleInventorySlot(iinventory, entityitem.getItemStack(), null);
+            if(possibleInventorySlot < 0) {
+                return false;
+            }
+            // Migot end
+
             // CraftBukkit start
             InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
             entityitem.world.getServer().getPluginManager().callEvent(event);
@@ -448,7 +505,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             }
             // CraftBukkit end
             ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
-            ItemStack itemstack1 = addItem(iinventory, itemstack, (EnumDirection) null);
+            ItemStack itemstack1 = addItem(iinventory, possibleInventorySlot, itemstack, null); // Migot
 
             if (itemstack1 != null && itemstack1.count != 0) {
                 entityitem.setItemStack(itemstack1);
@@ -462,17 +519,29 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     }
 
     public static ItemStack addItem(IInventory iinventory, ItemStack itemstack, EnumDirection enumdirection) {
+    // Migot start
+        return addItem(iinventory, -1, itemstack, enumdirection);
+    }
+
+    public static ItemStack addItem(IInventory iinventory, int possibleInventorySlot, ItemStack itemstack, EnumDirection enumdirection) {
+    // Migot end
         if (iinventory instanceof IWorldInventory && enumdirection != null) {
             IWorldInventory iworldinventory = (IWorldInventory) iinventory;
             int[] aint = iworldinventory.getSlotsForFace(enumdirection);
 
+            // Migot start
+            if(possibleInventorySlot >= 0 && possibleInventorySlot < aint.length) {
+                itemstack = c(iinventory, itemstack, possibleInventorySlot, enumdirection);
+            }
+            // Migot end
+
             for (int i = 0; i < aint.length && itemstack != null && itemstack.count > 0; ++i) {
                 itemstack = c(iinventory, itemstack, aint[i], enumdirection);
             }
         } else {
             int j = iinventory.getSize();
 
-            for (int k = 0; k < j && itemstack != null && itemstack.count > 0; ++k) {
+            for (int k = Math.max(possibleInventorySlot, 0); k < j && itemstack != null && itemstack.count > 0; ++k) { // Migot - set start index
                 itemstack = c(iinventory, itemstack, k, enumdirection);
             }
         }
@@ -575,7 +644,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     }
 
     private static boolean a(ItemStack itemstack, ItemStack itemstack1) {
-        return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.count > itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1)));
+        return itemstack.getItem() != itemstack1.getItem() ? false : (itemstack.getData() != itemstack1.getData() ? false : (itemstack.count >= itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1))); // Migot - can not merge when the itemcount is already >= getMaxStackSize
     }
 
     public double A() {
-- 
1.8.3.msysgit.0

